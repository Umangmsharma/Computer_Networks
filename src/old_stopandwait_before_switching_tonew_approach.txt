#include<stdio.h>
#include <sys/socket.h>
#include "chat.h"
#include <netinet/in.h>
#include <arpa/inet.h>
#include<stdlib.h>
#include <stdint.h>
#include <string.h>
#include <signal.h>
#include<stdbool.h>
#include <netinet/tcp.h>
#include <unistd.h>
#include <errno.h>
#include <pthread.h>
#include <fcntl.h>
#include <sys/stat.h>



#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 6767
#define MAX 256
#define MIN 25
//#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define UNUSED(x) (void)(x)

/* This flag controls termination of the main loop. */
volatile sig_atomic_t keep_going = 1;

typedef struct message_file
{
   char header[9];
   char file_data[247];
} message;

bool read_rudpfile(int sock, FILE *f)
{
	long filesize = 0;
	char buffer[MAX];
	char ack_buffer[MIN];
	int recvd = 0;
 	struct sockaddr_in remote_addr ;
	int buflen = sizeof(ack_buffer);

	int num =  sizeof(buffer);
	int ack_num = 0, flag = 0,ack_sent = 0, dup_pack = 0,  end_size =0,times_sent = 0;
    	struct timeval timeout;      
        message recv_msg;


//	printf("going to read now in buffer size : %d \n", num);
	bzero(recv_msg.header, sizeof(recv_msg.header));
	bzero(recv_msg.file_data, sizeof(recv_msg.file_data));
	bzero(buffer, sizeof(buffer));

	while((recvd = recvfrom(sock, buffer,
			MAX, 0, (struct sockaddr *)&remote_addr,
			(socklen_t* )&num)) > -1)
	{
	    printf("Received a message, size : %d \n", recvd );
		
	    if(strncmp((const char*)buffer, "END",3) == 0) {

		/* Handling end game  */
		printf("Got 'END' recvd_bytes : %d \n", recvd);
	 	snprintf(ack_buffer, buflen,
            			 "AckEND");

    		timeout.tv_sec = 0;
   		timeout.tv_usec = 200;

	       do
		{
		/* handling ending scenario */
	 	 printf("Sending ack : %s\n", ack_buffer);

		
    		if(setsockopt (sock, SOL_SOCKET, SO_RCVTIMEO, (char *)&timeout,
        			        sizeof(timeout)) < 0) {
       		 perror("setsockopt failed\n");	
		 }

		 int num = sendto(sock, ack_buffer, buflen, 0, (struct sockaddr*)&remote_addr, sizeof(remote_addr));
	 	 if (num == -1)
       	 	{
          	  return false;
       	 	}
		
		times_sent ++;
		end_size = recvfrom(sock, buffer,
			MAX, 0, (struct sockaddr *)&remote_addr,
			(socklen_t* )&num);

		if(end_size > 0 || times_sent == 4){
			printf("ack to ack buff : %s  recvd, close the server \n", buffer);
			close(sock);
			exit(0);
		 }
		}while(end_size <=0);	
	     }

	     bzero(recv_msg.header, sizeof(recv_msg.header));
	     bzero(recv_msg.file_data, sizeof(recv_msg.file_data));

             memcpy(&recv_msg, buffer, sizeof(buffer));

             printf("received message the header : %s , data : %s\n", recv_msg.header, recv_msg.file_data);

     	    const char s[4] = ":";
	    char *token;

	    token = strtok(recv_msg.header,s);
	    if (strcmp(token, "SeqNum") == 0) 
	   { 
		token = strtok(NULL, s);
		printf("seq num recv : %d \n",atoi(token));
	 	ack_num = atoi(token);
	   }
	
	    if(flag == 1 && ack_num == ack_sent){
	      // this is a duplicate packet, don't write in file since it would've already been written 
		dup_pack = 1;

	   } else {
	       dup_pack = 0;

       	}
		
		    
	    if(dup_pack != 1){
		    int offset = 0;
		/* since recvd buffer contains seqnum , which shouldn't be written to file */
		    recvd = recvd - sizeof(recv_msg.header) ;


		    printf("will write %d bytes in file now \n", recvd);
		    do
		    {
			size_t written = fwrite(&recv_msg.file_data[offset], 1, recvd-offset, f);
			if (written < 1)
			    return false;
			offset += written;
		    }
		    while (offset < recvd);

		    filesize -= (recvd - sizeof(recv_msg.header));
	    }

	    bzero(buffer, MAX);
	    bzero(recv_msg.header, sizeof(recv_msg.header));
	    bzero(recv_msg.file_data, sizeof(recv_msg.file_data));


            snprintf(ack_buffer, buflen,
            		 "AckSeq:%d",ack_num);

	    printf("sending ack : %s\n", ack_buffer);

	  int num = sendto(sock, ack_buffer, buflen, 0, (struct sockaddr*)&remote_addr, sizeof(remote_addr));
	  if (num == -1)
       	 {
            return false;
       	 }

	flag = 1;
	ack_sent = ack_num;
	}

    return true;
}

/*
 *  Here is the starting point for your netster part.1 definitions. Add the 
 *  appropriate comment header as defined in the code formatting guidelines
 */

/* Add function definitions */
void stopandwait_server(char* iface, long port, FILE* fp) {

		/* Take the UDP code path */
     struct sockaddr_in serv_addr;
     int u_sockfd = -1;

    UNUSED(iface);
    printf("in stop and wait server updated\n");

    u_sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (u_sockfd < 0) {
        printf("Failed to get a vaild Socket File Descriptor\n");
    }

    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = port;
    serv_addr.sin_port = htons(serv_addr.sin_port);
    serv_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(u_sockfd, (struct sockaddr *)&serv_addr,
        sizeof(serv_addr)) < 0) {
        printf("Transport: Config Socket Bind failed,"
                "errno : %d, error code : %s \n",
                errno, strerror(errno));
    }

    bool ok = read_rudpfile(u_sockfd, fp);

    if (!ok)
    {
	printf("error read");
    }

    close(u_sockfd);
    exit(0);
}

bool send_rudpdata(int sock,struct sockaddr_in servaddr, void *buf, int buflen)
{
    unsigned char *pbuf = (unsigned char *) buf;
  //  printf("send rudp data \n");

    while (buflen > 0)
    {
	int num = sendto(sock, pbuf, buflen, 0, (struct sockaddr*)&servaddr, sizeof(servaddr));
        if (num == -1)
        {
            return false;
        }

//	printf("buff sent : %s\n", pbuf);
        pbuf += num;
        buflen -= num;
    }

    return true;
}

bool send_rudpfile(int sock, struct sockaddr_in servaddr, FILE *f)
{
    fseek(f, 0, SEEK_END);
    long filesize = ftell(f);
    rewind(f);
    int packet_sent = 1, r=0, Seq_num = 0, Ack_num = 0, recvd =0, end_ack_count =0 ;
    char end_buffer[MIN];
    char buffer[MAX];

    message msg; 
    struct timeval timeout;      
    timeout.tv_sec = 0;
    timeout.tv_usec = 200;
     size_t num ;

     struct timeval last;
     socklen_t lastlen = sizeof(last);


    if (setsockopt (sock, SOL_SOCKET, SO_RCVTIMEO, (char *)&timeout,
                sizeof(timeout)) < 0)
        perror("setsockopt failed\n");	


    r = getsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, &last, &lastlen);
        if (r < 0) return r;

    if (r == 0) { printf("socket option for RCVTIMOUT was set \n"); }

    printf("send rudp file of size : %ld, msg size : %lu , header size : %lu , file buffer size : %lu, total buff size : %lu, filesize: %ld  \n \n", filesize, sizeof(msg), sizeof(msg.header), sizeof(msg.file_data), sizeof(buffer), filesize);

    if (filesize == EOF)
        return false;

    if (filesize > 0)
    {
        char recv_buffer[MIN];
        do
        {

         bzero(msg.header, sizeof(msg.header));
	 snprintf(msg.header, sizeof(msg.header),
             "SeqNum:%d",Seq_num);
	 int i = 0;

	
	while(msg.header[i] != '\0'){ i++;}
//	printf("seq num buffer size : %d , buffer %s\n",i+1, msg.header);

//	msg.header[i] = '\0';
	    
           num =  sizeof(msg.file_data) ;
	   printf("attempting to read %zu bytes from file  \n", num);
           bzero(msg.file_data, sizeof(msg.file_data));

           num = fread(msg.file_data, 1, num, f);
           if (num < 1)
           {
		 printf("file bytes finished, returning\n");
		 return false;
	   }

//	msg.file_data[246] = '\0';

//	printf(" File data attempting to send  %s \n", msg.file_data);

	/* this do while shall ensure a packet is sent and acked */
	do
	{
	packet_sent = 1;
	/* send a packet first and wait for it's ack */
	     memcpy(buffer, &msg, sizeof(message));
	     message copy_data;
	     memcpy(&copy_data, buffer, sizeof(message));

 // 	     printf("\n SEND the header : %s , data : %s \n \n ", copy_data.header, copy_data.file_data);
  	     printf("SEND size : %ld \n", (num)+sizeof(msg.header));

            if (!send_rudpdata(sock, servaddr,  buffer, (num) + sizeof(msg.header)))
               { 
		        printf("sending rudp data failed \n");
			return false;
	       }

    	     int recv_size =  sizeof(recv_buffer);

    	    while( (recvd = recvfrom(sock, recv_buffer,
                        MAX, 0, (struct sockaddr *)&servaddr,
                        (socklen_t* )&recv_size) ) > 0) 
	    {

		/* cancel the timer and the outer do while loop */
   	    //	 printf("ack received  : %s \n", recv_buffer);
	    	 const char s[4] = ":";
   		 char *token;

   		 token = strtok(recv_buffer,s);
		 if (strcmp(token, "AckSeq") == 0) 
		 { 
			token = strtok(NULL, s);
	//		printf("ack num recv : %d \n",atoi(token));

	       	 }

		Ack_num = atoi(token);

		if(Ack_num != Seq_num){
			printf("Possibly duplicate packet recvd , discard it and try to recv again \n");
			continue;
		} 	

		 keep_going = 0;
		 packet_sent = 0;

		 printf("\nPacket correctly ACKed, reading next from file and sending \n");
		 break ;
	    }
	} while(packet_sent);

	    Seq_num = !Seq_num;
            filesize -= num;
       //     printf("filesize remaining : %ld , next seqnum : %d \n",filesize, Seq_num);	    
        }
        while (filesize > 0);
    

  packet_sent = 1;
  const char *tmp = "END";
  /* for terminating the server, send "END" */
  memset(end_buffer, 0, sizeof end_buffer);
  strncpy(end_buffer, tmp, sizeof end_buffer - 1);
  memset(recv_buffer, 0, sizeof end_buffer);

  do
    {
   /* to close the server */
	
    if(sendto(sock, end_buffer, MIN, 0, (struct sockaddr*)&servaddr, sizeof(servaddr)) == -1) {
      perror("[ERROR] sending data to the server.");
      exit(1);
    }

//    printf("Ending client buff sent : %s\n", end_buffer);

    num =  sizeof(end_buffer);
    int recvd = recvfrom(sock, recv_buffer,
		MIN, 0, (struct sockaddr *)&servaddr,
		(socklen_t* )&num);

    if(((recvd < 0) && strcmp(end_buffer, "Ack_AckEND") == 0)) { 
	
//	printf("nothing read\n");
	if(end_ack_count < 3){
		end_ack_count ++;
		continue;
	} else {
	//  	printf("Tried my best to send Ack_AckEND,hopefully server got it,  I am closing down \n");
		packet_sent = 0; 
		break;
	}
   } else if(recvd < 0) { 
//	printf("nothing read\n");
	continue; 
   } else {
//	 printf("ack received  : %s \n", recv_buffer);
	
	if (strcmp(recv_buffer, "AckEND") == 0) 
  	{
		const char *tmp = "Ack_AckEND";
 		 /* for terminating the server, send "END" */
 	 	memset(end_buffer, 0, sizeof end_buffer);
 	      	strncpy(end_buffer, tmp, sizeof end_buffer - 1);
 		memset(recv_buffer, 0, sizeof end_buffer);
		continue;
	}
	
//	 printf("ack received  : %s, Handshake completed, end the client \n", recv_buffer);
	/* canncel outer do while loop, this packet is acked, do not need to resend */
	 packet_sent = 0;
   }

    bzero(recv_buffer, MIN);
  } while(packet_sent);

    bzero(end_buffer, MIN);
 }

    return true;
}

void stopandwait_client(char* host, long port, FILE* fp) {

    int f_sockfd,res =0;
    char send_buff[MAX],buffer[MAX];
    struct sockaddr_in     servaddr;
  
  //  printf("in rudp client \n");
    // Creating socket file descriptor
    if ( (f_sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) {
        perror("socket creation failed\n");
        exit(EXIT_FAILURE);
    }
  
    memset(&servaddr, 0, sizeof(servaddr));
    bzero(send_buff, sizeof(send_buff));
    bzero(buffer, sizeof(buffer));
 
    // Filling server information
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(port);
   // servaddr.sin_addr.s_addr = INADDR_ANY;
    res = inet_pton(AF_INET, host,
                    &(servaddr.sin_addr));
    if (res != 1) {
            printf("Failed to retrieve local chassis ip address,"
                     "errno : %d, error code : %s",errno, strerror(errno));
            return;
    }
      
    bzero(send_buff, sizeof(send_buff));
    bzero(buffer, sizeof(buffer));
    
     // Sending the data
  
    send_rudpfile(f_sockfd, servaddr, fp);

   close(f_sockfd);     
   exit(0);
}
